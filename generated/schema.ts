// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class MasterChef extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MasterChef entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MasterChef entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MasterChef", id.toString(), this);
  }

  static load(id: string): MasterChef | null {
    return store.get("MasterChef", id) as MasterChef | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalAllocPoint(): BigInt {
    let value = this.get("totalAllocPoint");
    return value.toBigInt();
  }

  set totalAllocPoint(value: BigInt) {
    this.set("totalAllocPoint", Value.fromBigInt(value));
  }

  get poolLength(): BigInt {
    let value = this.get("poolLength");
    return value.toBigInt();
  }

  set poolLength(value: BigInt) {
    this.set("poolLength", Value.fromBigInt(value));
  }
}

export class MasterChefPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MasterChefPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MasterChefPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MasterChefPool", id.toString(), this);
  }

  static load(id: string): MasterChefPool | null {
    return store.get("MasterChefPool", id) as MasterChefPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get lpToken(): Bytes {
    let value = this.get("lpToken");
    return value.toBytes();
  }

  set lpToken(value: Bytes) {
    this.set("lpToken", Value.fromBytes(value));
  }

  get allocPoint(): BigInt {
    let value = this.get("allocPoint");
    return value.toBigInt();
  }

  set allocPoint(value: BigInt) {
    this.set("allocPoint", Value.fromBigInt(value));
  }

  get lastRewardBlock(): BigInt {
    let value = this.get("lastRewardBlock");
    return value.toBigInt();
  }

  set lastRewardBlock(value: BigInt) {
    this.set("lastRewardBlock", Value.fromBigInt(value));
  }

  get accSushiPerShare(): BigInt {
    let value = this.get("accSushiPerShare");
    return value.toBigInt();
  }

  set accSushiPerShare(value: BigInt) {
    this.set("accSushiPerShare", Value.fromBigInt(value));
  }

  get addedBlock(): BigInt {
    let value = this.get("addedBlock");
    return value.toBigInt();
  }

  set addedBlock(value: BigInt) {
    this.set("addedBlock", Value.fromBigInt(value));
  }

  get addedTs(): BigInt {
    let value = this.get("addedTs");
    return value.toBigInt();
  }

  set addedTs(value: BigInt) {
    this.set("addedTs", Value.fromBigInt(value));
  }
}

export class Timelock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Timelock entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Timelock entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Timelock", id.toString(), this);
  }

  static load(id: string): Timelock | null {
    return store.get("Timelock", id) as Timelock | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get description(): string | null {
    let value = this.get("description");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (value === null) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(value as string));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get eta(): BigInt {
    let value = this.get("eta");
    return value.toBigInt();
  }

  set eta(value: BigInt) {
    this.set("eta", Value.fromBigInt(value));
  }

  get functionName(): string {
    let value = this.get("functionName");
    return value.toString();
  }

  set functionName(value: string) {
    this.set("functionName", Value.fromString(value));
  }

  get data(): string {
    let value = this.get("data");
    return value.toString();
  }

  set data(value: string) {
    this.set("data", Value.fromString(value));
  }

  get targetAddress(): string {
    let value = this.get("targetAddress");
    return value.toString();
  }

  set targetAddress(value: string) {
    this.set("targetAddress", Value.fromString(value));
  }

  get isCanceled(): boolean {
    let value = this.get("isCanceled");
    return value.toBoolean();
  }

  set isCanceled(value: boolean) {
    this.set("isCanceled", Value.fromBoolean(value));
  }

  get isExecuted(): boolean {
    let value = this.get("isExecuted");
    return value.toBoolean();
  }

  set isExecuted(value: boolean) {
    this.set("isExecuted", Value.fromBoolean(value));
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    return value.toBigInt();
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get createdTs(): BigInt {
    let value = this.get("createdTs");
    return value.toBigInt();
  }

  set createdTs(value: BigInt) {
    this.set("createdTs", Value.fromBigInt(value));
  }

  get expiresTs(): BigInt {
    let value = this.get("expiresTs");
    return value.toBigInt();
  }

  set expiresTs(value: BigInt) {
    this.set("expiresTs", Value.fromBigInt(value));
  }

  get canceledBlock(): BigInt | null {
    let value = this.get("canceledBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set canceledBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("canceledBlock");
    } else {
      this.set("canceledBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get canceledTs(): BigInt | null {
    let value = this.get("canceledTs");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set canceledTs(value: BigInt | null) {
    if (value === null) {
      this.unset("canceledTs");
    } else {
      this.set("canceledTs", Value.fromBigInt(value as BigInt));
    }
  }

  get executedBlock(): BigInt | null {
    let value = this.get("executedBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executedBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("executedBlock");
    } else {
      this.set("executedBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get executedTs(): BigInt | null {
    let value = this.get("executedTs");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executedTs(value: BigInt | null) {
    if (value === null) {
      this.unset("executedTs");
    } else {
      this.set("executedTs", Value.fromBigInt(value as BigInt));
    }
  }

  get createdTx(): string {
    let value = this.get("createdTx");
    return value.toString();
  }

  set createdTx(value: string) {
    this.set("createdTx", Value.fromString(value));
  }

  get canceledTx(): string | null {
    let value = this.get("canceledTx");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set canceledTx(value: string | null) {
    if (value === null) {
      this.unset("canceledTx");
    } else {
      this.set("canceledTx", Value.fromString(value as string));
    }
  }

  get executedTx(): string | null {
    let value = this.get("executedTx");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set executedTx(value: string | null) {
    if (value === null) {
      this.unset("executedTx");
    } else {
      this.set("executedTx", Value.fromString(value as string));
    }
  }
}
