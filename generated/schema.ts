// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Bar extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bar entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bar entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bar", id.toString(), this);
  }

  static load(id: string): Bar | null {
    return store.get("Bar", id) as Bar | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get sushi(): Bytes {
    let value = this.get("sushi");
    return value.toBytes();
  }

  set sushi(value: Bytes) {
    this.set("sushi", Value.fromBytes(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get staked(): BigDecimal {
    let value = this.get("staked");
    return value.toBigDecimal();
  }

  set staked(value: BigDecimal) {
    this.set("staked", Value.fromBigDecimal(value));
  }

  get users(): Array<string> {
    let value = this.get("users");
    return value.toStringArray();
  }

  set users(value: Array<string>) {
    this.set("users", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get bar(): string {
    let value = this.get("bar");
    return value.toString();
  }

  set bar(value: string) {
    this.set("bar", Value.fromString(value));
  }

  get xSushi(): BigDecimal {
    let value = this.get("xSushi");
    return value.toBigDecimal();
  }

  set xSushi(value: BigDecimal) {
    this.set("xSushi", Value.fromBigDecimal(value));
  }

  get staked(): BigDecimal {
    let value = this.get("staked");
    return value.toBigDecimal();
  }

  set staked(value: BigDecimal) {
    this.set("staked", Value.fromBigDecimal(value));
  }

  get stakedUSD(): BigDecimal {
    let value = this.get("stakedUSD");
    return value.toBigDecimal();
  }

  set stakedUSD(value: BigDecimal) {
    this.set("stakedUSD", Value.fromBigDecimal(value));
  }

  get harvested(): BigDecimal {
    let value = this.get("harvested");
    return value.toBigDecimal();
  }

  set harvested(value: BigDecimal) {
    this.set("harvested", Value.fromBigDecimal(value));
  }

  get harvestedUSD(): BigDecimal {
    let value = this.get("harvestedUSD");
    return value.toBigDecimal();
  }

  set harvestedUSD(value: BigDecimal) {
    this.set("harvestedUSD", Value.fromBigDecimal(value));
  }
}
